name: deployment-pipeline
run-name: Pipeline | ${{ github.event.head_commit.message }} | By @${{ github.actor }}
on:
  push:
    branches:
      - master

env:
  APP_NAME: ${{ vars.APP_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_STATE_BUCKET: ${{ vars.TERRAFORM_STATE_BUCKET }}
  TERRAFORM_STATE_FILE: ${{ vars.TERRAFORM_STATE_FILE }}
  AWS_STS_EXTERNAL_KEY: ${{ secrets.AWS_STS_EXTERNAL_KEY }}
  AWS_TERRAFORM_ROLE_ARN: ${{ vars.AWS_TERRAFORM_ROLE_ARN }}
  DEVELOPER_EMAIL_ADDRESS: ${{ vars.DEVELOPER_EMAIL_ADDRESS }}

jobs:
  package-cognito-triggers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package post confirmation trigger lambda
        run: zip -r post_confirmation_trigger.zip cognito_triggers/post_confirmation/*
      - uses: actions/upload-artifact@v3
        with:
          name: post-confirmation-deployment-package
          path: post_confirmation_trigger.zip

  terraform-validate:
    runs-on: ubuntu-latest
    environment: plan-infrastructure
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: post-confirmation-deployment-package
      - uses: hashicorp/setup-terraform@v2
      - name: Validate Terraform configuration
        run: |
          cd terraform
          terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET" -backend-config="key=$TERRAFORM_STATE_FILE" -backend-config="region=$AWS_REGION"
          terraform validate
    needs: package-cognito-triggers

  terraform-plan:
    runs-on: ubuntu-latest
    environment: plan-infrastructure
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: post-confirmation-deployment-package
      - uses: hashicorp/setup-terraform@v2
      - name: Plan actions by Terraform
        run: |
          cd terraform
          terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET" -backend-config="key=$TERRAFORM_STATE_FILE" -backend-config="region=$AWS_REGION"
          terraform plan -out=app.tfplan \
            -var aws_region="$AWS_REGION" \
            -var app_name="$APP_NAME" \
            -var aws_key_id="$AWS_ACCESS_KEY_ID" \
            -var aws_secret_key="$AWS_SECRET_ACCESS_KEY" \
            -var aws_terraform_role_arn="$AWS_TERRAFORM_ROLE_ARN" \
            -var aws_assume_role_external_id="$AWS_STS_EXTERNAL_KEY" \
            -var developer_email_address="$DEVELOPER_EMAIL_ADDRESS"
          cd ..
      - uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-prd
          path: terraform/app.tfplan
    needs: terraform-validate

  terraform-apply:
    runs-on: ubuntu-latest
    environment: create-infrastructure
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: post-confirmation-deployment-package
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/download-artifact@v3
      - name: Apply Terraform plan
        run: |
          cd terraform
          terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET" -backend-config="key=$TERRAFORM_STATE_FILE" -backend-config="region=$AWS_REGION"
          terraform apply -auto-approve "./../terraform-plan-prd/app.tfplan"
    needs: terraform-plan

  terraform-destroy:
    runs-on: ubuntu-latest
    environment: destroy-infrastructure
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/download-artifact@v3
      - name: Destroy infrastructure with Terraform
        run: |
          cd terraform
          terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET" -backend-config="key=$TERRAFORM_STATE_FILE" -backend-config="region=$AWS_REGION"
          terraform destroy -auto-approve \
            -var aws_region="$AWS_REGION" \
            -var app_name="$APP_NAME" \
            -var aws_key_id="$AWS_ACCESS_KEY_ID" \
            -var aws_secret_key="$AWS_SECRET_ACCESS_KEY" \
            -var aws_terraform_role_arn="$AWS_TERRAFORM_ROLE_ARN" \
            -var aws_assume_role_external_id="$AWS_STS_EXTERNAL_KEY" \
            -var developer_email_address="$DEVELOPER_EMAIL_ADDRESS"
    needs: terraform-plan